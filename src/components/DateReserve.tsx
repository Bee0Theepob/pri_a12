"use client";
// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ library ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô @mui/x-date-pickers ‡∏´‡∏£‡∏∑‡∏≠ react-datepicker

import { DatePicker } from "@mui/x-date-pickers/DatePicker"; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs, { Dayjs } from "dayjs";
import React, { useState } from "react";
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î prop type
interface DateReserveProps {
  onDateChange: (date: string) => void;
}

export default function DateReserve({ onDateChange }: DateReserveProps) {
  const [selectedDate, setSelectedDate] = React.useState<Dayjs | null>(null);

  const handleDateChange = (newValue: Dayjs | null) => {
    setSelectedDate(newValue);
    // üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô YYYY/MM/DD)
    if (newValue) {
      onDateChange(newValue.format("YYYY/MM/DD"));
    } else {
      onDateChange("");
    }
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <DatePicker
        label="Booking Date"
        value={selectedDate}
        onChange={handleDateChange}
        slotProps={{ textField: { fullWidth: true, variant: "standard" } }}
      />
    </LocalizationProvider>
  );
}
